# docker-compose.yml
version: '3.8'

services:
  redis:
    restart: always
    image: redis:alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - app-network

  backend-api:
    build: 
      context: ./server
      dockerfile: Dockerfile
    restart: always
    container_name: backend-api
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    volumes:
      - ./server:/app
    ports:
      - 4100:8000
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - OUTPUT_AUDIO_DIR=/app/output_audio      
    networks:
      - app-network
    depends_on:
      - redis

  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: always
    container_name: celery-worker
    command: celery -A app.celery_worker worker --loglevel=info --concurrency=1 --max-tasks-per-child=1
    volumes:
      - ./server:/app
      - ./server/output_audio:/output_audio
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERYD_MAX_TASKS_PER_CHILD=100
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT}
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=audio-storage
      - MINIO_SECURE=False
    networks:
      - app-network
    depends_on:
      - redis
      - backend-api
    extra_hosts:
      - "host.docker.internal:host-gateway"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # frontend:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   container_name: frontend-nginx
  #   ports:
  #     - 4101:80
  #   networks:
  #     - app-network
  #   depends_on:
  #     - backend-api

networks:
  app-network:
    driver: bridge

volumes:
  redis_data: